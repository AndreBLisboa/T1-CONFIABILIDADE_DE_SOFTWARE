        -:    0:Source:src/merge_sort.c
        -:    1://Implementation of Merge Sort in C
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:typedef int TYPE;
        -:    5:void merge(TYPE [], int, int, int);
        -:    6:void merge_sort(TYPE [], int, int);
        -:    7:
function merge called 116 returned 100% blocks executed 100%
      116:    8:void merge(TYPE A[], int p, int q, int r) {
        -:    9:    int i, j, k;
      116:   10:    int nL = q - p + 1; 
      116:   11:    int nR = r - q;
        -:   12:
      116:   13:    TYPE *L = malloc(sizeof(TYPE)*nL);
      116:   14:    TYPE *R = malloc(sizeof(TYPE)*nR);
        -:   15:    
      392:   16:    for (i = 0; i < nL; i++)    
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      276:   17:        L[i] = A[p + i];
        -:   18:    
      342:   19:    for (j = 0; j < nR; j++)    
branch  0 taken 66%
branch  1 taken 34% (fallthrough)
      226:   20:        R[j] = A[q + 1 + j];
        -:   21:    
      116:   22:    i = j = 0;
      116:   23:    k = p;
        -:   24:    
      358:   25:    while (i < nL && j < nR) 
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 75%
branch  3 taken 25% (fallthrough)
      242:   26:        if (L[i] <= R[j])  A[k++] = L[i++];
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
      166:   27:        else  A[k++] = R[j++];
        -:   28:    
      316:   29:    while (i < nL)    A[k++] = L[i++];
branch  0 taken 63%
branch  1 taken 37% (fallthrough)
      176:   30:    while (j < nR)    A[k++] = R[j++];
branch  0 taken 34%
branch  1 taken 66% (fallthrough)
        -:   31:        
      116:   32:    free(L);
      116:   33:    free(R);
      116:   34:}
function merge_sort called 243 returned 100% blocks executed 100%
      243:   35:void merge_sort(TYPE A[], int p, int r) {
      243:   36:    if(p < r) {
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
      116:   37:        int q = (p + r) / 2;
      116:   38:        merge_sort(A, p, q);
call    0 returned 100%
      116:   39:        merge_sort(A, q + 1, r);
call    0 returned 100%
      116:   40:        merge(A, p, q, r);
call    0 returned 100%
        -:   41:    }
      243:   42:}
